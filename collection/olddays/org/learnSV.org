#+TITLE: learnSV
#+DATE: <2016-08-31 周三>
#+AUTHOR:
#+EMAIL: LME_zhangz@LME_ZHANGZ-PC
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.5.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export

* SystemVerilog验证

** Part 1
*** Chp1 验证导论

**** 1.1 验证流程
- 硬件设计，创建一个基于设计规范并能完成特定任务的设备。
- 验证设计，确保该设备能够正确地完成预定的任务。

***** 1.1.1 不同层次上的测试
- 代码块(block)，模块(module)内部。
- 代码块边界，速度快。
- 多个代码块，可以相互激励，工作负担较少；需要在代码和测试平台中同时查找漏洞。
- 最高层次，整个系统都被测试，仿真过程会简单。
  - 需要更精细的测试，让待测设计尽可能多的代码块被激活。
- 出现错误时的待测模块的处理。

***** 1.1.2 验证计划
- 需要验证什么样的特性
- 采用哪些技术
包括
+ 定向或随机的测试
+ 断言
+ 软硬件协同验证
+ 硬件仿真
+ 形式验证
+ 对验证IP的使用

**** 1.2 验证方法学
VMM 有一套针对数据和环境的基本类，有多种功能。

**** 1.3 基本测试平台的功能
1. 产生激励(sequence item)
2. 把激励加到DUT上(driver)
3. 捕捉响应(monitor)
4. 检验正确性(scoreboard)
5. 对照整个验证目标测算进展情况(coverage)

**** 1.4 定向测试
- 渐进式的方法。
- 稳步前进，设计复杂会翻倍消耗时间。

**** 1.5 方法学基础
- 原则
  1. 受约束的随机激励
  2. 功能覆盖率
  3. 使用事务处理器的分层测试平台
  4. 对所有的测试通用的测试平台
  5. 独立于测试平台之外的个性化测试代码
- 分层的测试平台将复杂的问题分解为容易处理的小块，降低复杂度
- 通过”钩子“，调整激励或注入错误等操作
- 针对单一测试的个性化代码必须与测试平台分开
- 每个随机测试都包含一部分代码，同过不同的激励约束，得到正确或者错误的激励
- 最后的漏洞可能只能通过定向测试来发现

**** 1.6 受约束的随机激励
- 希望随机，又不希望完全随机
- 约束比定向范围大
- 约束可能重叠
- 约束可能不合法，此事需调整约束
- 约束不到的，可能需要定向测试
- 通过检测功能覆盖率，循环迭代以完成测试

**** 1.7 随机化的对象
1. 设备的配置
2. 环境配置
3. 输入数据
4. 协议异常
5. 错误和违例
6. 时延

***** 1.7.1 设备和环境配置
- 设备的配置指设备自身的设置
- 环境的配置指设备的外围所被包围的其他部件
  - 如周围部件的个数、种类等
  - 还包含测试长度，错误注入比率，以及时延模式

***** 1.7.2 输入数据
- 第5章和第8章，认真准备事务类
- 估计所有的分层协议和错误注入，以及记分板的内容和功能覆盖率

***** 1.7.3 协议异常、错误和违例
- 非法操作，信号冲突。
- 通过断言定位错误的位置，可以提高查错效率

***** 1.7.4 时延和同步
- 单输入时，输入间的时延可能隐藏了漏洞
- 多输入时，不同输入口的速度差可能存在漏洞

***** 1.7.5 并行的随机测试
- 通过不同的种子，进行并行测试
- 使用各种方法改变测试的种子

**** 1.8 功能覆盖率
通过功能覆盖率，确认验证的进展。
- 需要在测试平台中加入监控激励，以及设备对激励的反应，并据此确定功能验证的进展。
- 收集仿真结果，进行分析，确定下一步的测试激励。

***** 1.8.1 从功能覆盖率到激励的反馈
- 通过功能覆盖率的统计结果，自动控制新激励的生成，减少人工干预。
- 难度大，需要丰富的经验，较少使用。

**** 1.9 测试平台的构件
- 产生激励并捕捉响应
- 工作在一个个抽象层次范围
- 创建事务和激励序列并最终转换成比特向量
- 平台模块：包含多种bfm（如果需要fpga仿真，则需要验证组件也是课综合的）

**** 1.10 分层的测试平台
让平台变得易于维护，减轻工作量。

***** 1.10.1 不分层的测试平台
- 把通用的操作放到一个子程序中，可以提高效率，减少出错。
- 物理和命令层的建立，是分层的第一步。

***** 1.10.2 信号和命令层
- 信号层，包含待测设计和把待测设计连接到平台的信号（DUT,interface）
- 命令层，驱动器、监视器和断言（driver,monitor,assertion）

***** 1.10.3 功能层
- 代理，记分板，检验器(agent,scoreboard,checker)
- 事务(transaction)

***** 1.10.4 场景层
- 组织随机的事务(sequence)
- 在测试平台中，当以上的行为发生变化时，通过工厂模式和回调函数来创建。

***** 1.10.5 测试的层次和功能覆盖率
- 测试包含了用于创建激励的约束。
- 功能覆盖率可以衡量所有测试在满足验证计划要求方面的进展。
- 在测试中创建“定向测试”，搭配随机测试作为“背景噪声”（信号间隔、事务信号间隔），将漏洞暴露出来。
- 除了“测试”，其他构建可以根据需要选择部分实现。
- 可能需要更多层构件，来实现。

**** 1.11 建立一个分层的测试平台
***** 1.11.1 创建简单的驱动器
- 驱动器可能会注入错误或者增加实验，然后把命令分解层一些信号的变化。
- 核心为一个循环
简单例子：
1. 获取一个事务
2. 进行变换
3. 发送事务
实际中：
- 另一个实例是agent，将复杂的事务分割成多个总线命令。(Chp5)
- 使用信箱实现对象在不同事务处理器之间传递。(Chp5)
- 不同层之间交换数据并使事务处理器实现同步。(Chp7)

**** 1.12 仿真环境阶段
基本的阶段是建立(build)，运行(run)和收尾(wrap-up)。
建立阶段
1. 生成配置：把待测设计的配置和周围环境随机化
2. 建立环境：基于配置来分配和连接测试平台的构件（外围的仿真构件，并非待测设计本身）
3. 对待测设计进行复位
4. 配置待测设计：基于第一步中生成的配置，载入待测设计的命令寄存器
运行阶段
1. 启动环境：裕兴测试平台的构件
2. 运行测试：启动测试然后等待测试完成。由上而下的等待，每层空闲；同时设置超时检测。
收尾节点
1. 清空：在最下层完成以后，等待待测设计清空最后的事务。
2. 报告：从记分板中创建报告，测试失败的数据需要抛弃。

**** 1.13 最大限度的代码重用
可以重用的代码价值巨大，时刻思考重用。
可以重用的代码价值巨大，时刻思考重用。
可以重用的代码价值巨大，时刻思考重用。

**** 1.14 测试平台的性能
创建受约束的随机测试需要几个步骤
- 建立分层的测试平台，包括自检部分
- 按照验证计划中列举的目标创建激励
- 功能覆盖率
- 收集数据
- 分析数据

**** 1.15 结束语
System Verilog 就是屌。

**** 总结



*** Chp2 数据类型
优点：
1. 双状态数据类型
2. 队列、动态和关联数组
3. 类和结构
4. 联合和合并结构
5. 字符串
6. 枚举类型

**** 2.1 内建数据类型
Verilog 的变量都是静态的，存活在整个仿真过程。子程序不能通过堆栈来保存形参和局部变量。

***** 2.1.1 逻辑(logic)类型
- 具有reg的所有功能，以及wire的部分功能。
- 不能有多驱动，多驱动只能使用wire。

***** 2.1.2 双状态数据类型
| name         | detail                   |     |
|--------------+--------------------------+-----|
| bit          | 双状态，单比特           | aaa |
| bit [31:0]   | 双状态，32比特无符号整型 |     |
| int unsigned | 双状态，32比特无符号整型 |     |
| int          | 双状态，32比特有符号     |     |
| byte         | 双状态，8比特有符号      |     |
| shortint     | 双状态，16比特有符号     |     |
| longint      | 双状态，64比特有符号     |     |
| integer      | 四状态，32比特有符号     |     |
| time         | 四状态，64比特无符号整数 |     |
| real         | 双状态，双精度浮点数     |     |
- 随机化时带符号的变量可能造成意想不到的结果。
- 新类型都是有符号数。用无符号数时，建议用bit。
- 检查四状态数值: $isunknown(), 如果出现X或Z时返回1。

**** 2.2 定宽数组

***** 2.2.1 定宽数组的声明和初始化
- SystemVerilog 允许只给出数组宽度的便捷声明方式
- 多维数组允许紧凑型的声明
- 越界的地址，四状态返回X，双状态返回0。定宽数组、动态数组、关联数组和队列同样适应。
- 非合并数组将数组元素存放在32比特的字边界。
- logic和integer通常使用多一倍的空间。
示例
#+BEGIN_SRC verilog
int array2[0:7][0:3];  //完整声明，应当注意下表的顺序。
int array3[8][4];  //紧凑声明
#+END_SRC

***** 2.2.2 常量数据
一个单引号加大括号来初始化数组。
#+BEGIN_SRC verilog
int ascend[4] = '{0,1,2,3};
int descend[5];
descend = '{4,3,2,1,0};
descend[0:2] = '{5,6,7};
ascend = '{4{8}};
descend = '{0:9,1:8,default:1};
#+END_SRC

***** 2.2.3 基本的数据操作-for和foreach
for (Internet i = 0; i<$size(src);i++)  //$size返回数组的宽度。
foreach(dst[j])
- 只需指定数组名并在其后面的方括号中给出索引变量，
- 索引变量将自动声明，并只在循环中有效。
foreach(md[i,j])
- 多维数据的索引变量用法比较特别。
#+BEGIN_SRC verilog
int md[2][3]='{'{0,1,2},'{3,4,5}}
#+END_SRC

- 多维数组赋值。
foreach(md[,j]) $write("%d",md[i][j]);
- 只遍历其中某一个维度。

***** 2.2.4 基本的数组操作--复制和比较
- 必须为类型完全一样的数组才可以进行复制和比较。
- 可以用于数组片段比较，必须保证片段类型完全一样。

***** 2.2.5 同时使用位下标和数组下标

***** 2.2.6 合并数组
存储时为连续的比特集合，中间没有任何限制的空间。

***** 2.2.7 合并数组的例子
- 合并的位和数组的大小作为数据类型的一部分必须在变量名前面；
- 数组大小定义的格式必须是[msb:lsb]，不可以使[size];
- 可以扩展为更多维的合并数组；
- 引用时，下标顺序从左到右对应声明时的顺序；
- 合并数组的本质是，连续的比特
例子
#+BEGIN_SRC verilog
 bit [3:0][7:0] bytes;
#+END_SRC


合并数组和非合并数组可以混合使用。
#+BEGIN_SRC verilog
 bit [3:0][7:0] barray[3];
 bit [31:0] one_word = 32'h0123_4567;
 barray[0] = one_word;
#+END_SRC

合并数组的本质只是将简单变量的位宽用数组的形式表达。
混合了非合并数组的合并数组，使用时必须至少带有一个下标。
合并数组实现复制时，因为其本质为比特，所以只需要保证长度相等即可，维度可以不同。

***** 2.2.8 合并数组和和非合并数组的选择
- 当需要和标量进行相互转换时，使用合并数组会非常方便。
- 任何数组类型都可以合并。
- 如果需要等待数组中的变化，则必须使用合并数组
  - @：只能用于标量或者合并数组；
  - 不能使用barray，只能使用:
    #+BEGIN_SRC verilog
      @(barray[0] or barray[1] or barray[2]);
    #+END_SRC

**** 2.3 动态数组

- 编译时不指定宽度，运行时分配空间。
#+BEGIN_SRC verilog
 int dyn[],dyn2[];
 initial dyn = new[5];
 dyn2 = new[4]; // dyn2 = new[10];
 dyn = new[5](dyn2);
 dyn.delete();
#+END_SRC
- 动态数组位宽函数 dyn.size，$size(dyn)
- 动态数组可以不用new函数，直接初始化。此时位宽将会定下来。
- 只要基本数据类型相同，定宽数组和动态数组间的元素可以相互赋值
- 在元素数目相同的情况下，可以把动态数组的值复制给定宽数组。

**** 2.4 队列
- 结合链表和数组的优点。
- 可以在队列的任何地方增删元素。性能比动态数组高（动态数组需要新建数组再复制）。
- 可以通过索引实现对任一元素的访问，不需要像链表那样去遍历目标元素前的所有元素。
例子
元素增删
#+BEGIN_SRC verilog
 int q[$] ={0,2,4};  // 元素编号从左向右升序排列，0开始。队列赋值不需要 '{} 。
 q.insert(1,j); // 在2前插入j。
 q.insert(1,q2); // 在j前插入队列q2。
 q.delete(1);  // 删除第1个元素
 q.push_front(6); // 在队列前面插入6
 q.push_back(6);  // 在队列后面插入6
 j = q.pop_front; // 弹出队列前面的元素并赋值给j
 j = q.pop_back; // 弹出队列后面的元素并赋值给j
 q.delete();  // 删除队列
#+END_SRC
范围表达
 [$:2]  [5:$] $在左表示最小边界，在右代表最大边界。
#+BEGIN_SRC verilog
 q = {q[0],j,q[1:$]}
 q = {q[0:2], q2, q[3:$]}
 q = {q[0],q[2:$]}
#+END_SRC

元素增删的等效方法
#+BEGIN_SRC verilog
 q = {6，q}
 j = q[$] // 最右边的值
 q = q[0:$-1]
 q = {q,8}
 j = q[0]
 q = q[1:$]
#+END_SRC
对队列前后元素的操作是速度非常快的，操作队列中间的元素则与队列长度有关。
可以把定宽或者动态数组的值赋给队列。

**** 2.5 关联数组

- 使用关联数组类型，保存稀疏矩阵的元素。SV 只为实际写入值的元素分配空间。
- 仿真器可以使用树或者哈希表的形式来存放关联数组。
- 声明：在方括号中放置数据类型的形式作为索引的数据包，（可以使用‘*’，不推荐）
- 例：
#+BEGIN_SRC verilog
   bit [63:0]  assoc[bit[63:0]],idx=1;
   assoc[idx] = idx;
   foreach(assoc[i]) $display("assoc[%h]=%h",assoc[i]);  //只打印有索引的内容。
   assoc.first(idx); // 找到第一个元素，并将其索引值赋给idx，如果失败返回0，成功返回1
   assoc.next(idx); // 找到下一个元素，并将其索引值赋给idx，如果失败返回0，成功返回1
   assoc.delete(idx); // 删除元素
   assoc.prev(idx);
   assoc.last(idx);
   assoc.exists(idx);
#+END_SRC

- 使用字符串作为索引，实现字符串到数字的映射。
#+BEGIN_SRC verilog
   int switch[string];
   int max_addr;
   max_addr = switch.exists("max_addr") ? switch["max_addr"] : 1000;
   switch.exists; //判断元素是否存在

#+END_SRC

**** 2.6 链表
类似c++的列表容器，sv 队列更高效，不推荐使用链表。

**** 2.7 数组的方法

***** 2.7.1 数组缩减方法
- 需要注意 sv 处理操作尾款的规则。
- 常用的缩减方法，
  - sum
  - product
  - and
  - or
  - xor
- 例子
  - bit on[10];
  - $display("%d",on.sum); //single bit 1
  - $display("%d",on.sum+32'd0); //32 bits 5
  - int total = on.sum; // total = 5;
  - if (on.sum > 32'd5) // return 1;
- 在数组中随机选取一个元素的方法
  - 可以通过$urandom_range($size(array)-1)
  - 队列和动态数组还可以使用$urandom_range(array.size()-1)
  - 关联数组需要逐个访问它之前的元素
    - int element = $urandom_range(aa.size()-1);
    - foreach(aa[i])
      - if(count++ == element)
        - begin rand_idx = i; break; end
    - aa[rand_idx];

***** 2.7.2 数组定位方法
数组定位函数返回值，通常是一个“队列”。
支持的类型：定宽数组，动态数组，队列
#+BEGIN_SRC verilog
 q_tmp = queue.max(); // maximum value
 q_tmp = queue.min(); // minimum value
 q_tmp = queue.unique(); // delete duplicate values are not include.
#+END_SRC
搜索方法 find：
#+BEGIN_SRC verilog
q_tmp = queue.find with (item>3); // return queue of items
  q_tmp = queue.find_index with ();  //  return items' index
  q_tmp = queue.find_first  with (); // return first item
  q_tmp = queue.find_first_index  with (); //
  q_tmp = queue.find_last  with (); //
  q_tmp = queue.find_last_index  with (); //

#+END_SRC
条件语句 with；重复参数的声明，重复参数 item （默认item，可以修改）；
#+BEGIN_SRC verilog
 tq=d.find with (item > 3); // 大于3的元素
 tq=d.find ()with (item >3);
 tq=d.find (x) with (x >3);
#+END_SRC

***** 2.7.3 数组的排序
排序的方法
#+BEGIN_SRC verilog
d.reverse(); // 倒序
d.sort();  // 升序排序
d.rsort(); // 降序排序
d.shuffle(); // 乱序
#+END_SRC
倒序（reverse）和乱序（shuffle）不可以带with

***** 2.7.4 使用数组定位方法建立记分板
使用结构体定义包，使用队列实现数据存储。

**** 2.8 选择存储类型
参考准则

***** 2.8.1 灵活性
- 索引为非负整数，定宽或者动态数组
  - 确定深度，定宽
  - 运行时确定深度，动态
- 处理数组的子程序，动态
  - 可以处理不同宽度的数组
- 处理数组的子程序，队列或者关联数组
- 数组索引不规则时，关联数组
- 运行中数目变化大的数组，队列

***** 2.8.2 存储器用量
- 双状态类型可以减少仿真时的存储器用量
- 尽量使用32bit的整数倍作为数据位宽
  - 如使用合并数组，可以节省空间
- 数组类型的性能，深度相关
  - 1000，无差别
  - 1,000 ~ 1,000,000 定宽和动态具有最高的存储器使用效率
  - >1,000,000 应当检查设计
- 长度经常发生变化的数组，存放在动态数组中时，大量的new[]和复制，会降低性能
- M字节以上的应当使用关联数组。关联数组元素占用空间大，访问效率低。

***** 2.8.3 速度
少量读写，差别小。
- 定宽和动态数组，每个元素的访问耗时都相同
- 队列首尾操作几乎无差别，中间的操作效率非常低。
- 关联数组最慢

***** 2.8.4 排序
- 一次性赋值使用定宽、动态
- 逐个加入，队列
- 不连续，且彼此互异，可以使用关联
  - 存储32bit的数值，数值生成后直接写入索引位置
    - exist检查是否存在
    - delete删除

***** 2.8.5 选择最优的数据结构
推荐例子
1. 网络数据包。定长，顺序存取。定宽或者动态
2. 保存计分板。一般使用队列。如果元素多，并可能随意增删，使用关联数组
3. 有序结构。顺序输出，队列；乱序输出，关联。如果不需要输出，mailbox。
4. 多有百万级数据，关联。不可用关联，考虑使用合并。
5. 有命令名，或者操作码：索引为字符串的关联数组。

**** 2.9 使用 typedef 创建新的类型
实例
#+BEGIN_SRC verilog
  typedef reg [OPSIZE-1:0] opreg_t;
  typedef bit [31:0] uint;  // 常用无符号int
  typedef int unsigned uint;  // 等效
  typedef int fixed_array5[5] // 定宽数组数据类型，声明后即可以得到int数组
#+END_SRC

**** 2.10 创建用户自定义结构
结构只包含数据，可以综合。

***** 2.10.1 使用 struct 创建新类型
将若干变量组合到一个结构
#+BEGIN_SRC verilog
 struct {bit [7:0] r,g,b;} pixel;  // 创建结构变量
 typedef struct {bit [7:0] r,g,b} pixel_s; // 创建结构类型
#+END_SRC

***** 2.10.2 对结构进行初始化
初始化方法，像数组一样。
#+BEGIN_SRC verilog
 pixel_s my_pixel = '{8'haa,8'hbb,8'hff};
#+END_SRC

***** 2.10.3 创建可容纳不同类型的联合
N选1，多个数据类型能同时存在一个。
#+BEGIN_SRC verilog
 typedef union {int i; real f} num_u;
 num_u un;
 un.f=0.0;
#+END_SRC
要点
+ 若以不同类型对一个寄存器频繁读写时，相当有效
+ 不应为省空间使用，复杂的数据消耗更大
+ 使用类，可以达到同样效果，功能更强大
+ 如果需要提高存储效率，合并数组效果更好

***** 2.10.4 合并结构
可以将结构合并在一起

typedef struct packed {bit [7:0] r,g,b;} pixel_p_s

***** 2.10.5 在合并结构和非合并结构之间进行选择
- 若果只进行复制操作，合并结构效率高
- 如果需要对每个数据都进行运算操作，合并结构的操作开销非常大。不应使用。

**** 2.11 类型转换

***** 2.11.1 静态转换
指定要转换的类型，在表达式外面加单引号。
#+BEGIN_SRC verilog
 int i = int '(10.0-0.1);
#+END_SRC

Verilog 对整数和实数，或者不同位宽的向量之间进行隐式转换。

***** 2.11.2 动态转换
函数 $cast 允许对越界的数值进行检查。

***** 2.11.3 流操作符
- '>>' 和 '<<' 用在赋值表达式右边，后面带表达式、结构或者数组。
- 将后面的数据打包成比特流。>>数据从左至右打包，<<数据从右至左打包。
- 流操作符后，可以接数据类型，或数字。表示按数据类型长度，或者指定长度(从左向右，或者从右向左)对数据进行打包。
例子
#+BEGIN_SRC verilog
 h = {>> {j}};
 h = {>> 4 {j}};
 {>> {q,r,s,t}} = j
#+END_SRC;
***** 2.12 枚举类型
****** 2.12.1 定义枚举类型
****** 2.12.2 枚举类型的子程序
****** 2.12.3 枚举类型的转换

**** 2.13 常量
- const byte colon = ":";
- const 初始化之后不能修改值

**** 2.14 字符串
- 不含 \0 ，动态存储，编号为0到N-1
- 操作符
  - ==
  - !=
  - >= > <= <  //以字典顺序比较值 ASIIC 表值
  - {multiplexer{str}}
  - {str,str,str}
  - str.FUNCTION();
    - function int len();
    - function void putc(int i, byte c);
    - function byte getc(int i);
    - function void toupper();
    - function void tolower();
    - function int compare(string s);
    - function int icompare(string s);
    - function string substr(int i,int j);
    - atoi, atohex, atootc, atobin, atoreal
    - itoa, hextoa, otctoa, bintoa, realtoa
- $psprintf("%s %5d",s,42);

**** 2.15 表达式的位宽
#+BEGIN_SRC verilog
bit one = 1'b1
 $displayb(one+one) //0
 bit [7:0] b8 = one + one; // 2
 $displayb(one+one + 2'b0) // 2
 $displayb( 2 ' (one)  +one) // 2 ,强制类型转换
#+END_SRC

**** 2.16 结束语
fuck 花了好长时间，才看完。

*** Chp3 过程语句和子程序
c语言风格的代码

**** 3.1 过程语句
- begin...end fork...join 可以添加标号
- ++ -- 可以作为前缀和后缀
- SV添加了continue 和 break，verilog只支持disable

**** 3.2 任务、函数以及void函数
- Verilog 中function必须有返回值，返回值必须被使用
- SV 中允许函数调用任务，只允许在fork..join_none中
- 不消耗事件的任务，应使用void函数，以便被调用
- 如果想忽略函数的返回值，可以使用void进行结果转换
  - void ' ($fscanf(file,"%d",i));

**** 3.3 任务和函数概述
不带参数的子程序不需要带空括号。但是可以带。

***** 3.3.1 在子程序中去掉 begin...end
begin...end不在是必须的关键词

**** 3.4 子程序参数
***** 3.4.1 c语言风格的子程序参数
c语言风格时，必须使用logic类型。（合理，但实测可以使用reg，int等其他类型）。
#+BEGIN_SRC verilog
task mytask1 (output logic [31:0] x,input logicy);
...
endtask
#+END_SRC

***** 3.4.2 参数的方向
输入方向的关键字(input)可以省略，不建议省略。

***** 3.4.3 高级的参数类型
- verilog 中子程序对于参数都是做复制操作，in、out、inout。
- SV 中新增 ref 指定参数为引用。这样将数组传递给子程序，效率高
- SV 中可以不带ref传递参数，此时使用的是复制方式，资源消耗大
- SV 中 ref 只能用于带自动存储的子程序 （automatic属性）
- 当不需要改变数组值得时候加上 const 修饰，则子程序修改参数时，编译器会报错。
- SV 中 ref 类型的参数在子程序值发生改变时，外部可以立即得到。而不带ref的参数则会在子程序结束后，才更新。
#+BEGIN_SRC verilog
task automatic task1(ref bit [31:0] a []);
...
endtask
#+END_SRC

***** 3.4.4 参数的缺省值
- 可以允许子程序带有缺省值
  #+BEGIN_SRC verilog
  function void func1(int low=0,high=-1);
  ...
  endfunction
  #+END_SRC
- 使用-1（或者其他越界值）作为缺省值，对于获知调用时是否有指定值，是一个有效的方法。

***** 3.4.5 采用名字进行参数传递
- SV 中允许子程序，使用类似模块借口的方式进行参数设置
  #+BEGIN_SRC verilog
  initial begin
   many(,6, .d(8));
  end
  #+END_SRC

***** 3.4.6 常见的代码错误
- 缺省的参数类型与前一个参数类型相同
- 应当为每个参数明确指定参数类型（in、out、inout、ref）

**** 3.5 子程序的返回
Verilog 中，当function运行结束后，返回一个与函数同名的变量。
***** 3.5.1 返回语句
- return 可以让代码更规整。

***** 3.5.2 从函数中返回一个数组
三种方法
- 先定义数组类型，然后将函数的返回类型定义为为数组，性能低
- 将返回值设为void，向函数传入ref类型的数组参数，性能高
- 将数组封装到类（class）中，返回对象（object）的句柄。

**** 3.6 局部数据存储
Verilog 是HDL，所有对象都是静态存储，非基于堆栈。导致无法使用递归子程序一类的动态代码。

***** 3.6.1 自动存储
- 多个地方调用同一个任务时，由于任务里的局部变量使用共享的静态存储区，所以会串用局部变量。
- automatic可以指定任务(task)、函数(function)、模块(module)强制使用堆栈区存储局部变量。
- SV 中module 和program 默认是用静态存储，（经测试task也是静态）

***** 3.6.2 变量的初始化
- SV 允许在代码任意位置声明变量
- SV 中默认情况下，任意位置声明的变量都是静态存储的。（initial 块中，需要在其他代码之前声明变量）
  - 这意味着，仿真前就已经做了声明。
    - 如果声明中带有初始化的值，而初始值又是另外一个变量，则代码可能出错。
      解决方法
      1. 强制为动态存储，添加automatic
      2. 声明中去除初始化

**** 3.7 时间值

***** 3.7.1 时间单位和精度
- 可以使用timeunit timeprecision 取代 `timescale
- 如果使用 timeunit timeprecision， 则必须每个有时延的模块都必须添加 timeunit timeprecision；

***** 3.7.2 时间参数
- $timeforamt $time $realtime

***** 3.7.3 时间和变量
- time , real 类型赋值可以加时间单位 800fs

***** 3.7.4 $time 与 $realtime 的对比
- $time 整数
- $realtime 有小数位的实数

**** 3.8 结束语

** Part 2
*** Chp4 连接设计和测试平台
核心概念是：除了待测设计的行为之外，测试平台仿真了其他的所有行为。

**** 4.1 将测试平台和设计分开
- interface :: 使用接口（interface）可以解决测试模块，与测试平台之间的连接问题。
- program :: 程序块（program block）可以从逻辑和时间上分开测试平台。

***** 4.1.1 测试平台和 dut 之间的通信
仲裁器的例子

***** 4.1.2 与端口的通信
老式的实现方法，不灵活、易错。

- 待测模块 :: arb，仲裁器实现。
- 测试平台 :: test，测试平台，不带时钟产生器，但是有复位（reset）产生器。
- 顶层 :: top，例化仲裁器，测试平台和时钟产生器。

**** 4.2 接口
接口包含，连接，同步，两个或多个模块间的通信功能，它们连接了设计快和测试平台。

***** 4.2.1 使用接口来简化连接
SV 中进行模块设计的时候，可以将端口（port）封装到接口（interface）中。
#+BEGIN_SRC verilog
interface arb_if(input bit clk);
endinterface

module arb(arb_if arb_if)
endmodule : arb

module top;
bit clk;
always #5 clk = ~clk;
arb_if arb_if(clk);
arb a1 (arb_if);
test t1 (arb_if);
endmodule :top
#+END_SRC
接口声明必须在模块和程序块之外。如 include if.sv 要在top module外面。

***** 4.2.2 连接接口和端口
需要对verilog-2001兼容时，可以将接口（interface）连接到设计块的端口（port）上。

***** 4.2.3 使用 modport 将接口中的信号分类
在interface中，使用modport，定义不用的接口方向分组。通常在模块设计块的接口声明中，确定接口的modport类型。必要时可以在top中连接设计的时候，再确定类型。
#+BEGIN_SRC verilog
interface arb (input bit clk);
modport TEST(output request, rst
            input grant, clk);
modport DUT (...);
modport ...
endinterface

module arb(arb_if.DUT arb_if)
endmodule : arb
#+END_SRC

***** 4.2.4 在总线设计中使用 modport
并不是接口中每个信号都必须连接。

***** 4.2.5 创建接口监视模块
连接接口中信号，并输出接口行为的相应信息。

***** 4.2.6 接口的优缺点
接口可以例化接口，不可以例化模块。
****** 优势
- 利于设计重用
- 减少模块间的连接错误
- 信号增加减少只需要在接口中声明，不需要改变上层设计
- modport 可以捆绑信号，可以指定信号方向，方便模块自检。

****** 劣势
- 对于点对点的连接，modport 一样冗长。只是将接口放在一起了，方便工具检测。
- 必须同时使用信号名和接口名，模块可能更加冗长。

- 如果不重用，接口做的事情比端口更多。
- 连接两个不同的接口很困难。需要拆分，并正确的驱动。

***** 4.2.7 更多的例子和信息

**** 4.3 激励时序
需要注意驱动和接受信号的同步。避免时序竞争问题。

***** 4.3.1 使用时钟块控制同步信号的时序
时钟块定义了信号的时序关系，时钟块同时指明了接口信号的输入输出关系。在 modport 中可以直接使用时钟块。

***** 4.3.2 接口中的logic和wire对比
- wire 更加方便复用，在initial块中不可以直接赋值，但是可以多驱动
- logic 更加易用，可以在initial块中直接赋值，不可以多驱动

***** 4.3.3 verilog 中的时序问题
无法做到完全跟事实一致。

***** 4.3.4 测试平台--设计见的竞争状态
使用非阻塞赋值，使得信号无冲突。

***** 4.3.5 程序块（program block） 和时序区域（timing region）
- 时序冲突的根源是，测试波形和设计混合在一起了。
- sv 将时间节点处理过程分成了 active observe reactive postponed 四个过程
  - active :: simulation of design code in module
  - observe :: evaluation of system verilog assertion
  - reactive :: execution of testbench code in programs
  - postponed :: sampling design signals for testbench input
- 测试代码应当包含在一个单个program中。
- 应使用对象 oop，而非模块实现动态，分层的测试平台。一次仿真可能有多个程序块。
- 应当使用automatic修饰程序块。

***** 4.3.6 仿真的结束
- 所有程序块中所有initial的最后一句时，仿真结束。
- 可以使用 $exit 结束程序块
- 可以使用 $finish 结束仿真

***** 4.3.7 指定设计和测试平台之间的延时
- 在postpone region，所有的值都会被锁定。
- 可以认为时钟块做了时间节点上 design 和 testbench 的同步。

**** 4.4 接口的驱动和采样
***** 4.4.1 接口同步
使用 @ 或者 wait 作为接口信号的同步

***** 4.4.2 接口信号采样
在时钟块中(clock block)采样值，为变化边沿前的值。

***** 4.4.3 接口信号驱动
使用带时钟块(clocking block)的 modport 时，时钟同步的接口信号，应当加上接口名(interface)和时钟块名(clocking block)。

***** 4.4.4 通过时钟块驱动接口信号
- testbench中，在时钟有效边沿使用阻塞赋值，数值可以立即传输到design中；如果不在时钟边沿使用阻塞赋值，数值会在下一个有效边沿传输到design中。
- 带时钟块(clocking block)的接口中，使用阻塞赋值可能出现数据丢失.
- 时钟块中的延时控制 必须有明确指明时钟
  - ##0 ::  如果当前为时间点(time slot)，则即时改变值，否则下一个有效边沿.
  - ##1 ::  即时当前为时间点(time slot)，也在下一个有效边沿改变值.
  - ##2 ::  2个有效时钟边沿。 类似 repeat (2) @arb_if.cb
  - 注意 :: ##3 后面必须要带赋值语句。
    - 合法
      #+BEGIN_SRC verilog
      ##2 arbif.cb.request <=0;
      #+END_SRC
    - 非法
      #+BEGIN_SRC verilog
      ##2 ;
      #+END_SRC

***** 4.4.5 接口中双向信号
程序中可以直接对双向信号进行读取、赋值操作。
***** 4.4.6 为什么不在程序（program）中不允许使用always块
- testbench 中的 always 可能不正常工作
- testbenc 中有 always ，则 testbench 将不能正常结束。
- 可以使用 initial forever 实现
***** 4.4.7 时钟发生器
时钟块应在design中实现。
**** 4.5 将这些模块连接起来
在top连接design和testbench。
#+BEGIN_SRC verilog
module top;
 bit clk;
always #4 clk=~clk;

arb_if arbif(.*);
arb a1(.*);
test t1(.*);
endmodule
#+END_SRC
.* 为端口的省略写法。

***** 4.5.1 端口列表（port list）中的接口（interface）必须连接
端口（port）有接口（interface）的模块，必须声明了接口，才可以编译通过。
#+BEGIN_SRC verilog
module top;
 bit clk;
always #4 clk=~clk;

arb_if arbif(clk);
arb a1(arbif);
endmodule
#+END_SRC

**** 4.6 顶层作用域
- $unit :: 编译时的顶层引用路径
- $root :: elaborate之后的顶层路径
- 顶层模块的显式例化 ::
     #+BEGIN_SRC verilog
     `timescale 1ns/1ns
     top t1();
     module top;
         ....
     endmodule
     `define TOP $root.top
     program automatic test;
     ...
     endprogram
     #+END_SRC

**** 4.7 程序--模块交互
可以在design中添加function接口，方便 testbench 访问design中的数据。
第10章中，有示例如何在接口(interface)中使用function和断言。

**** 4.8 system verilog 断言
可以使用时序断言，并跟踪断言。通过断言，可以收集功能覆盖率。

***** 4.8.1 立即断言（Immediate Assertion）
- 断言逻辑 :: 不符合断言条件，则会触发断言。

***** 4.8.2 定制断言行为
- then, else ::
断言支持then分句和else分句。
#+BEGIN_SRC verilog
a1: assert (bus.cb.grant == 2'b01)
   grants_received++;
else
  $error("grant not assert");
#+END_SRC
- 4个输出消息的函数 :: $info, $warning, $error, $fatal.

***** 4.8.3 并发断言(concurrent assertions)
- 等效连续运行的模块。
#+BEGIN_SRC verilog
interface arb_if(input bit clk);
 ...

 property request_2state;
   @(posedge clk) disable iff (rst);
   $isunknown(request) == 0;
 endproperty
endinterface
#+END_SRC

***** 4.8.4 断言的进一步探讨

**** 4.9 四端口的 atm 路由器
***** 4.9.1 使用端口的 ATM 路由器
***** 4.9.2 使用端口的 ATM 顶层网单
***** 4.9.3 使用接口简化连接
***** 4.9.4 ATM 接口
***** 4.9.5 使用接口的 ATM 路由器模型
***** 4.9.6 使用接口的 ATM 顶层网单
***** 4.9.7 使用接口的 ATM 测试平台
**** 4.10 ref 端口的方向
**** 4.11 仿真结束
**** 4.12 LC3取值模块的定向测试



*** Chp5 面对对象编程基础
**** 5.1 概述
**** 5.2 考虑名词，而非动词
- 传统 :: 创建事务，发送，接收，检查结果。
- oop :: generator，driver，monitor，scoreboard，blocks
- 对比 :: 传统倾向于数据流动，oop倾向于将每个独立的事情分裂出来。
**** 5.3 第一个类
- endtask endfunction 等中添加label
- 代码风格
**** 5.4 在哪里定义类
program，module，package或者这些位置之外的任意位置。
可以使用包把类定义和类型定义捆绑在一起。

**** 5.5 oop术语
class 类，object 对象，handle 句柄，property 属性，method 方法，prototype 原型（程序头，程序名，返回类型，参数列表）

**** 5.6 创建新对象
对象在运行时才被创建。

***** 5.6.1 句柄和构造函数
声明一个类的变量时，此变量名称即为句柄。

***** 5.6.2 定制构造函数
new()可以有输入参数，可以部分参数赋值，方法与module的例化赋值方法类似。
new()的调用取决月赋值操作符左边的句柄类型

***** 5.6.3 将声明和创建分开   :特别注意:
声明类的变量和构造函数应当分开；
普通变量的声明和初值应当分开，在task中，没有分开的变量声明和赋初值，初值可能会不生效。

***** 5.6.4 new[] 和 new()
new[] 是动态数组分配空间，new()是构造函数。

***** 5.6.5 为对象创建一个句柄
可以改变句柄handle指向的对象object
一个object可以有多个handle。没有handle指向object的时候，object将会被回收。

**** 5.7 对象的解除分配
当没有指向句柄指向对象，则对象将会被回收。将句柄指向null，可以将空间释放。
如果是链表的话，则需要手动将每个对象进行释放。
如果对象中有从线程中派生出来的程序，只要线程仍在运行，曾对象空间不会别释放。

**** 5.8 使用对象
严格的OOP规定，只能通过对象的公有方法访问对象的变量。
测试平台需要最大限度的控制所有的变量，以产生最广泛的激励。

**** 5.9 静态变量和全局变量
- task一定要注意添加automatic修饰，避免同时调用时产生的冲突。
- class中的task默认为automatic，其他位置默认为static。

***** 5.9.1 简单的静态变量
- 类中的静态变量将被这个类的所有实例共享。
- 应用实例
  使用静态变量count记录实例个数。
  每个类中建立非静态变量ID， new函数中， id=count++

***** 5.9.2 通过类名访问静态变量
使用类名作用域操作符 :: 访问静态变量。

***** 5.9.3 静态变量的初始化
静态变量的初始化不应当在构造函数中实现。
静态变量的初始化可以有专门的初始化函数，但需要保证初始化函数在第一个类的实例构造之前，已使用了静态变量的初始化函数。

***** 5.9.4 静态方法
类中的方法默认为automatic，使用使用static的方法，优化实现。
不允许静态方法读写非静态方法。

**** 5.10 类的方法
默认为自动存储的

**** 5.11 将类的方法定义在类的外面。
- 提高可读性
- extern
  在类中声明方法，加extern 修饰。
- 类作用域符:: 。
  在外面定义方法时，必须要指定累作用域。

**** 5.12 作用域规则
- 使用 点(.)索引变量
- 使用时，建议使用完整路径避免错误索引
- 如果在代码上一级中已有变量，隐式声明变量可能会失败，而变成对上一级的引用。因此class应当写在独立的代码文件中，规避错误。
- 使用package 包装class

- this专指类一级的变量。

**** 5.13 在一个类中使用另一个类
将类分解成多个类有利于代码管理

***** 5.13.1 类的大小应该有上限和下限
分解类会带来层次上的复杂度的增加。

***** 5.13.2  编译顺序的问题
如果类包含了一个未定义的类，可以使用typedef class 来声明类名。

**** 5.14 理解动态对象
对象和句柄是一一对应的。句柄可以存储在数组、队列或者另一个对象中。

***** 5.14.1 将对象传递给方法
传递对象是传递的是对象的句柄。因此，方法中对对象的修改会在方法外生效。

***** 5.14.2 在任务中修改句柄
对象的默认信号方向是input，即内部复制句柄的值。
如果需要改变句柄的值，需要将信号方向改为ref。
方向为ref的信号在task外面发生变化时，也会影响task内部信号。

***** 5.14.3 在任务中修改对象
如果对一个对象的进行多次修改再传输句柄，则存在接受的对象可能只有一个数值。
较为稳妥的方法是，每次修改都新建一个对象，或者每次都将传输的对象进行拷贝。

***** 5.14.4 句柄数组
对象没数组，句柄可以有数组。不同的句柄数组中的句柄可以指向相同或者不同的对象。

**** 5.15 对象的复制
使用new函数对对象进行复制，可以使对象专门的复制代码。

***** 5.15.1 使用new操作符复制一个对象
内建的复制函数，复制所有现有对象的变量。
下层对象不会被复制，而是复制了对象的句柄。

***** 5.15.2 简单的复制函数
不包含对其他类的引用，可以写简单的copy函数，正确情况下等效于new。

***** 5.15.3 深层复制函数
对于非简单类，应该创建自己的copy函数。
copy的函数中，应当调用当前类中的子对象的copy函数，保证数据的完整性。

***** 5.15.4 使用数组对对象进行打包和解包。
把对象的需要打包的数据使用流操作符，打包到bytes，（UVM中自带pack函数）
#+BEGIN_SRC verilog
class transaction;
function void pack(ref byte bytes[40]);  //Care about the key word 'ref'
bytes={>>{addr,crc,data}};
endfunction
function void pack(ref byte bytes[40]);
bytes={>>{addr,crc,data}};
endfunction
endclass
#+END_SRC

**** 5.16 public & local
oop大部分默认local，sv默认公有。

**** 5.17 题外话
多考虑使用类

**** 5.18 建立平台

*** Chp6 随机化

*** Chp7 线程以及线程间的通信

所有仿真行为都是独立的线程。sv 调度器选择下一个要运行的线程。通过控制线程，控制仿真行为。
线程中的通信，有标准的Verilog的事件 event，事件控制 event control, wait 语句，和system Verilog的mailbox，旗语semaphores。

**** 7.1 线程的使用

program中不可以有always，可以使用initial forever实现。
fork...join
fork...join_none
fork...join_any
event,  @ event, wait, disable

***** 7.1.1 使用fork...join和begin...end

所有代码并发执行。
所有分支完成后才执行join后面的任务。

***** 7.1.2 使用fork...join_none来产生线程

fork...join_none块在调度其块内语句是，父线程继续执行。

***** 7.1.3 使用fork...join_any实现线程同步

任一个语句完成后，父线程才能继续执行。

***** 7.1.4 在类中创建线程

在类中，以任务的方式启动新的线程。
#+BEGIN_SRC verilog
class Gen_drive;
task run(int n);
   pack p;
   fork
       repeat (n) begin
          p=new();
          assert(p.randomize());
          transmit(p);
       end
   join_none
endtask
endclass
#+END_SRC

***** 7.1.5 动态线程

使用fork...join_none，可动态产生新的线程。不需要等待其他的线程先完成。
例子：仿真开始时，产生多个随机事务，传输事务，为每个事务产生一个后处理线程。

***** 7.1.6 线程中的自动变量

如果不是automatic 的 program 或 module，各线程会共享相同的变量，导致后面的值覆盖前面的值。
解决方式有2中
- 在静态的的 program 中定义 automatic的变量
  #+BEGIN_SRC verilog
  program bug_free;
    initial begin
     for (j=0; j<3; j++)
       fork
         automatic int k =j;
         $write(k);
       join_none
    end
  endprogram
  #+END_SRC
- 在automatic的 program中，在fork...join_none外定义变量
  #+BEGIN_SRC verilog
  program automatic bug_free;
    initial begin
     for (j=0; j<3; j++)
        int k =j;
        fork
          $write(k);
        join_none
    end
  endprogram
  #+END_SRC
PS: vcs 中不正确，ncsim中正确。应当避免在for中，使用fork...join。

***** 7.1.7 等待所有衍生线程

使用 wait fork 等待线程(fork...join_none)结束。

***** 7.1.8 在线程间共享变量

- bug
  在类内部的子程序中，可以是用局部变量，类变量或者在程序中定义的变量。
  sv会往更高层的作用范围中寻找，直到找到匹配的声明。
- solution
  在包含所有变量使用的最小范围内声明所有的变量。
  尽可能使用foreach

**** 7.2 停止线程

disable可以用于停止system Verilog 中的线程

***** 7.2.1 停止单个线程

在fork...join_any块中创建超时警告线程。
为fork...join_any添加label
线程任务完成，结束fork...join_any
#+BEGIN_SRC verilog
task check;

   fork
      begin
         fork :  time_out_blk
            begin
               task_real_job();
            end
            # TIME_OUT $display("timeout");
         join_any
         disable time_out_blk;
      end
   join_none // spawn threadm don't block

endtask

#+END_SRC

***** 7.2.2 停止多个线程

disable fork 停止当前fork...join产生的线程与各级子线程。
如果只需停止单个线程，disable <lable> 更保守。

***** 7.2.3 禁止被多次调用的任务

同一个任务如果在多个进程中被调用，则任意一个任务被 disable 终止的话，其他的进程中的任务也是结束。

**** 7.3 线程间的通信

通信包括三成员，producer、consumer、communication channel。

**** 7.4 事件

-> 触发事件
@　边沿事件阻塞
事件发生竞争时，使用triggered()函数，查询事件是否触发。

***** 7.4.1 在事件的边沿阻塞

关键字： event
使用方法： -> event; @ event;

***** 7.4.2 等待事件的触发

wait(e1.triggered()) 只要事件曾被触发，则为有效电频

***** 7.4.3 在循环中使用事件

循环中应当避免使用trigger，因为可能产生零延时循环，死锁。

***** 7.4.4 传递事件

传递事件时，传递的是其指针。因此可以直接传递。

***** 7.4.5 等待多个事件

- wait fork
- 记录下已触发时间的数目
  1) 在program中声明次数变量
  2) 在生成类中使用静态变量。


**** 7.5 旗语

使用旗语可以实现对同一资源的访问控制。令牌，钥匙。

***** 7.5.1 旗语的操作
new 创建一个或多个钥匙的旗语
get 获取一个或多个钥匙
put 返回一个或多个钥匙
try_get 试图获得钥匙而希望不被阻塞

***** 7.5.2 带多个钥匙的旗语

1. 返货的要是可以比取出来的多
2. 获取和返回多个钥匙需要谨慎。
   在多个钥匙的环境中，如果只剩一把钥匙，而去请求2把钥匙，将的阻塞，此时若果有1把钥匙的请求，则成功。
   此例忽略的 fifo 的原则。

**** 7.6 信箱

1. 假设发生器 generator 和驱动器 driver 都是自动的对象。其上下游的数据需要进行交互时，使用共享的数组或者队列的话，读写和阻塞会变得困难。

2. 信箱是有源端和收端的fifo。

3. 信箱是一个对象。需要使用new来例化。可选参数size，默认为0.
   - put 把数据放入信箱中
   - get 把数据从信箱中取出。
   - peek 可以获取信箱中的拷贝，而不移除数据。
   - 信箱满，则put会阻塞，信箱空，则get会阻塞。
   - try_get()和try_peek() 不会发生阻塞。

4. 信箱中的数据可以是单个值，特别的，可以是句柄，但不能是对象。
   - 传输对象时需要，新建对象，才能将对象的指针传输到信箱中，否则传输的是同一个对象。

***** 7.6.1 测试平台里的信箱

- 使用 new 新建传输对象
- 使用 put 传输对象
- 使用 get 获得对象
#+BEGIN_SRC verilog
// instance
 mailbox mbx;
 mbx = new();

// get class
 this.mbx = mbx;

#+END_SRC

***** 7.6.2 定容信箱

- 缺省信箱容量为0，无限大
- 大于0为信箱容量
#+BEGIN_SRC verilog
 mbx = new(1);
#+END_SRC
- 当信箱存满时，put会阻塞。

***** 7.6.3 在异步线程间使用信箱通信

- 实际异步线程中，生产不应当在消费房的前头。
- 没有握手信号，非定容信箱生产与消费将会不同步。

***** 7.6.4 使用定容信箱和探视(peek)来实现线程的同步

- 先使用peek拷贝数据，处理完成后，再使用get消除信箱中的数据。

***** 7.6.5 使用信箱和事件来实现线程的同步

- 同一个时间(time slot)内，只要促发过时间，则event.triggered为高，时间点(time slot)推进后，event.triggered变为0.
- @ event，则只有在触发边沿才会被捕捉到，当同一个时间点(time slot)多次触发时，可以被多次捕捉。如果阻塞和促发同时发生，可能会出现次序的问题。

***** 7.6.6 使用信箱来实现线程的同步

- 可以用一个mailbox来实现握手。无任何毒副作用。
- 使用 mailbox 需要注意数据类型匹配！
- 特例：
  #+BEGIN_SRC verilog
  mailbox rtn;
  rtn = new();
  int i;
  int j;
  rtn.put(-i);  // attention
  rtn.get(j);   // in ncsim, there is an error, for mismatch data type.
  #+END_SRC
  #+BEGIN_SRC verilog
  integer j; // solution 1
  #+END_SRC
  #+BEGIN_SRC verilog
  rtn.put(int ' (-i)); // solution 2
  #+END_SRC

***** 7.6.7 其他同步技术
使用旗语也可以实现阻塞线程，旗语相当于第二个信箱，但是没有信息交互。

**** 7.7 构筑带线程并可实现线程间通信的测试程序

***** 7.7.1 基本的事务处理器

***** 7.7.2 配置类

***** 7.7.3 环境类

***** 7.7.4 测试程序

** Part 3
*** Chp8 面向对象编程的高级技巧
**** 8.1 继承的简介
***** 8.1.1 事务基类
***** 8.1.2 Transaction类的扩展
***** 8.1.3 更多的oop术语
***** 8.1.4 扩展类的构造函数
***** 8.1.5 驱动类
***** 8.1.6 简单的发生器类
**** 8.2 蓝图(blueprint)模式
***** 8.2.1 environment类
***** 8.2.2 一个简单的测试平台
***** 8.2.3 使用扩展的Transaction类
***** 8.2.4 使用扩展类改变随机约束
**** 8.3 类型向下转换(downcasting)和虚方法
***** 8.3.1 使用 $cast 作类型向下的转换
***** 8.3.2 虚方法
***** 8.3.3 签名
**** 8.4 合成、继承和其他替代的方法
***** 8.4.1 在合成和继承之间取舍
***** 8.4.2 合成的问题
***** 8.4.3 继承的问题
***** 8.4.4 现实世界的其他问题
**** 8.5 对象的复制
***** 8.5.1 copy_data方法
***** 8.5.2 指定复制的目标
**** 8.6 抽象类和纯虚方法
**** 8.7 回调
***** 8.7.1 创建一个回调任务
***** 8.7.2 使用回调来注入干扰
***** 8.7.3 记分板简介
***** 8.7.4 与使用回调的记分板进行连接
***** 8.7.5 使用回调来调试事务处理器
**** 8.8 参数化的类
***** 8.8.1 一个简单的堆栈
***** 8.8.2 关于参数化类的建议
**** 8.9 结论

*** Chp9 功能覆盖率

*** TODO Chp10 高级接口
DEADLINE: <2016-09-02 周五>
- State "TODO"       from ""           [2016-08-07 周日 16:28]

*** TODO Chp11 完整的SystemVerilog测试平台
DEADLINE: <2016-09-02 周五>
- State "TODO"       from ""           [2016-08-07 周日 16:28]

*** TODO Chp12 SystemVerilog与C语言的接口
DEADLINE: <2016-09-02 周五>
- State "TODO"       from ""           [2016-08-07 周日 16:29]
