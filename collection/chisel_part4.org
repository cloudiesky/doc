
* General Testbench
** Set inputs using /poke/
** Advance simulation using /step/
** chake expected values using /expect/ (and/or peek)
** repeat until all appropriate cases verified
* 
#+BEGIN_SRC scala
  class Max2 extends Module {
    val io = IO(new Bundle {
      val in0 = Input(UInt(8.W))
      val in1 = Input(UInt(8.W))
      val out = Output(UInt(8.W))
    })
    io.out := Mux(io.in0 > io.in1, io.in0, io.in1)
  }

  class Max2Tests(c: Max2) extends PeekPokeTester(c) {

    val in0 = UInt(8.W)
    val in1 = UInt(8.W)
    for (i <- 0 until 10) {

      // Implement below ----------
      in0 := rnd.nextInt(lim)
      in1 := rnd.nextInt(lim)
      poke(c.io.in0, in0)
      poke(c.io.in1, in1)
      step(1)
      when ( in0 > in1 ){
        expect(c.io.out, in0)
      } .otherwise{
        expect(c.io.out, in1)
      }
    

      // Implement above ----------
    }
  }
#+END_SRC
